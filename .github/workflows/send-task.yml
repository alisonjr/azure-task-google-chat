name: Publish VSIX to Azure DevOps Marketplace

on:
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    # 1. Checkout do código-fonte
    - name: Checkout code
      uses: actions/checkout@v2

    # 2. Configurar Node.js
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22'  # Versão do Node.js que você deseja usar

    # 3. Instalar dependências do projeto na subpasta googlechatwebhook
    - name: Install dependencies
      run: |
        cd googlechatwebhook  # Entrando na pasta do projeto
        ls  # Para listar os arquivos, opcional
        npm install  # Instalar as dependências

    # 4. Instalar o tfx-cli globalmente
    - name: Install tfx-cli
      run: npm install -g tfx-cli

    # 5. Configurar as variáveis de ambiente (Token de Acesso Pessoal)
    - name: Set up Azure DevOps Personal Access Token (PAT)
      env:
        AZURE_DEVOPS_TOKEN: ${{ secrets.AZURE_DEVOPS_TOKEN }}  # Adicione esse secret nas configurações do repositório
      run: echo "##vso[task.setvariable variable=AZURE_DEVOPS_TOKEN;]${{ secrets.AZURE_DEVOPS_TOKEN }}"

    # 6. Criar o arquivo .vsix da extensão
    - name: Create VSIX package
      run: tfx extension create --manifest-globs googlechatwebhook/vss-extension.json

    # 7. Publicar a extensão no Azure DevOps Marketplace
    - name: Publish VSIX to Azure DevOps Marketplace
      run: tfx extension publish --vsix $(ls *.vsix) --token ${{ secrets.AZURE_DEVOPS_TOKEN }}
      env:
        AZURE_DEVOPS_TOKEN: ${{ secrets.AZURE_DEVOPS_TOKEN }}

    # 8. Upload do arquivo .vsix como artefato de release no GitHub
    - name: Upload VSIX as GitHub artifact
      uses: actions/upload-artifact@v3
      with:
        name: google-chat-az-extension # Nome do artefato, pode ser qualquer nome desejado
        path: *.vsix  # Caminho para o arquivo .vsix gerado, considerando que o arquivo esteja na raiz
